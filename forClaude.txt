간호 시뮬레이션 게임 상호작용 시스템 구현 방안 (상세)
1. 시스템 전체 구조
1.1. 핵심 관리 시스템
•	인터랙션 시스템 관리자: 모든 상호작용을 총괄 관리하는 중앙 시스템
•	절차 관리자: 특정 간호 술기의 전체 흐름과 진행 관리
•	상태 추적 시스템: 아이템별, 단계별 진행 상태 및 완료 여부 추적
•	점수 및 피드백 시스템: 사용자 행동에 따른 점수 계산 및 피드백 제공
1.2. 데이터 구조
•	간호 술기 데이터: 전체 간호 술기에 대한 정의
•	아이템 상호작용 데이터: 개별 아이템에 대한 상호작용 정의
•	단계별 데이터: 각 상호작용 단계에 대한 세부 정의
•	조건 및 의존성 데이터: 아이템 간 관계 및 순서 정의
1.3. UI 관리 시스템
•	가이드 패널 관리자: 단계별 안내 텍스트 및 이미지 표시
•	튜토리얼 관리자: 사용자 안내를 위한 애니메이션 및 이미지 관리
•	피드백 UI 관리자: 성공/실패 시 시각적 피드백 제공
•	오류 메시지 관리자: 오류 발생 시 메시지 표시 및 데이터베이스 기록
2. 점수 및 감점 시스템
2.1. 점수 관리 방식
•	기본 점수: 술기 시작 시 기본 점수(100점 ) 부여, 100점에서 감점되는 방식
•	보너스 점수: 일부 단계에서 특별한 조건 충족 시 추가 점수 부여
2.2. 감점 유형
•	수행 오류 감점: 단계는 맞지만 수행 방법이 잘못된 경우 (예: 드래그 방향 잘못됨)
•	순서 오류 감점: 단계 순서가 잘못된 경우 
•	시간 초과 감점: 제한 시간을 초과한 경우
•	치명적 오류 감점: 환자 안전에 위협이 될 수 있는 심각한 오류 -> 큰폭의 감점 
2.3. 감점 처리 시스템
•	감점 이벤트: 각 오류 유형에 맞는 이벤트 발생
•	시각적 피드백: 화면 테두리 빨간색 깜빡임 2번
•	오류 메시지: smalldialogue를 통해 오류 내용 설명 
o	오류 별로 smalldialogue의 캐릭터 이미지, 이름이 다름. 
•	오류 기록: 발생한 오류를 데이터베이스에 기록하여 게임 종료후 리뷰가능
•	복구 메커니즘: 특정 오류 후 어떤 상태로 돌아갈지 정의
2.4. 감점 정도 설정
•	경미한 오류: 5점 감점 (경미한 절차 오류)
•	일반 오류: 10점 감점 (중요한 단계 생략 또는 잘못 수행)
•	치명적 오류: 즉시 실패 (환자에게 심각한 위해를 줄 수 있는 오류)
3. 이미지 및 오브젝트 관리 시스템
3.1. 이미지 관리자
•	이미지 레이어 관리: Z-order를 통한 이미지 중첩 순서 관리
•	이미지 그룹 관리: 논리적으로 연관된 이미지들을 그룹으로 관리
3.2. 다중 이미지 처리
•	이미지 그룹 활성화/비활성화: 여러 이미지를 한 번에 표시/숨김
•	단계별 이미지 세트: 각 단계마다 필요한 이미지들을 세트로 정의
•	조건부 이미지 표시: 특정 조건에 따라 다른 이미지 세트 표시
3.3.이미지  오브젝트 상호작용
•	인터랙티브  이미지 오브젝트: 클릭, 드래그 등 상호작용 가능한 오브젝트
•	상태 기반 이미지 오브젝트: 상태에 따라 이미지가 변하는 오브젝트
•	애니메이션 이미지  오브젝트: 자동으로 애니메이션되는 이미지 오브젝트(튜토리얼 화살표 등)
•	피드백 이미지 오브젝트: 사용자 행동에 반응하는 피드백 이미지 (성공/실패 표시 등)
3.4. 오브젝트 관리
•	임시 오브젝트: 특정 단계에서만 존재하는 오브젝트 
•	지속 오브젝트: 여러 단계에 걸쳐 존재하는 오브젝트 
•	구역 오브젝트: 인터랙티브 제스쳐로 인한 이동 등 불가하나, 터치 입력 시 구역 인지는 되는 오브젝트 
4. 아이템 간 순서 및 의존성 관리
4.1. 아이템 관계 정의
•	선행 관계: 아이템 A가 완료되어야 아이템 B 시작 가능
•	병렬 관계: 아이템 A와 B를 동시에 진행 가능
•	부분 의존 관계: 아이템 A의 특정 단계가 완료되어야 아이템 B의 특정 단계 진행 가능
•	조건부 관계: 특정 조건 충족 시에만 관계가 활성화 
4.2. 순서 검증 시스템
•	사전 조건 검사: 아이템/단계 시작 전 모든 필요 조건 검사
•	실시간 조건 모니터링: 조건 충족 여부 실시간 확인
•	순서 위반 감지: 올바른 순서가 아닐 경우 감점 매커니즘 진행

5. 인터랙션 유형 및 구현
5.1. 드래그 인터랙션
•	방향성 드래그: 특정 방향으로 드래그 
•	경로 드래그: 지정된 경로를 따라 드래그
•	타겟 드래그: 특정 위치로 오브젝트 드래그
•	멀티 드래그: 여러 단계의 드래그 필요 
•	드래그 유효성 검사 
5.2. 터치 인터랙션
•	영역 터치: 특정 영역 터치 
•	시퀀스 터치: 여러 곳을 순서대로 터치
•	타이밍 터치: 특정 타이밍에 터치
•	멀티 터치: 여러 손가락으로 동시에 터치
•	홀드 터치: 일정 조건 동안 터치 유지

6. 튜토리얼 및 가이드 시스템
6.1. 가이드 패널
•	단계별 지시문: 각 단계에서 수행할 작업 안내
•	‘힌트’ 버튼 클릭시 각 단계에 맞는 이미지 가이드: 시각적 예시 제공
6.2. 튜토리얼 애니메이션
•	방향 표시 화살표: 드래그 방향 등 안내, 부드럽게 깜빡임
•	하이라이트 효과: 터치 가능, 혹은 중요 영역 강조, 하얀 테두리, 부드럽게 깜빡임 

7. 확장성 및 유지보수성
7.1. 데이터 기반 설계
•	모든 상호작용은 데이터로 정의 (코드 수정 최소화)
•	새로운 아이템/단계 추가 용이
•	밸런싱 및 난이도 조정이 쉬움
•	버전 관리 및 변경 추적 용이
7.2. 모듈화 설계
•	각 기능을 독립적인 모듈로 개발
•	인터페이스를 통한 느슨한 결합
•	기능 추가/수정 시 영향 범위 최소화
•	재사용 가능한 컴포넌트 개발
7.3. 시각적 에디터 도구
•	인스펙터에서 모든 요소 설정 가능
•	드래그 앤 드롭으로 순서 관계 설정
•	실시간 미리보기 기능
•	데이터 유효성 검사 도구
이 구현 방안은 게임에서 요구하는 복잡한 상호작용, 다양한 감점 시스템, 여러 이미지의 동시 처리, 그리고 아이템 간 순서 관계를 모두 포괄적으로 다룰 수 있도록 설계되었습니다. 특히 데이터 기반 접근법을 통해 코드 수정 없이도 인스펙터에서 대부분의 기능을 설정할 수 있습니다.


예시) 
"멸균증류수" 아이템을 'pickupitem' 했을 때, 플레이어가 해야되는 단계는 1. 뚜껑을 드래그로 연다. 2. quizpopup에 뜨는 문제를 푼다. 3. 쓰레기통에 물을 조금 붓는다. 4. 폴리세트의 종지에 물을 붓는다.
이렇게 되고, 이걸 구현하려면 아래같은 단계가 필요해.
1. 멸균증류수 아이템을 클릭했을 때 멸균증류수를 들고 있는 handimage와 '멸균증류수 뚜껑' 이미지가 같이 뜬다.
2. 가이드 텍스트 : 드래그로 뚜껑을 여세요.
3. 튜토리얼 이미지가 뜬다.
4. 우선 뜨는 이미지는, 화살표모양으로,첫번째 드래그 해야하는 방향을 알려준다. 사용자가 첫번째 드래그를 하기 전까지는 첫번째 모양의 화살표 이미지가 부드럽게 깜빡깜빡한다.
5. 뚜껑 오브젝트를 사용자가 두번의 드래그로 연다. 처음의 드래그는 뚜껑의 위에서 아래로 돌리는 듯한 드래그 제스쳐로 열 수 있다. 뚜껑이 살짝 열린 것 마냥 뚜껑 오브젝트의 위치가 지정된 곳으로 살짝 움직인다.
6. 튜토리얼 이미지가 뜬다.
7. 첫번째 드래그가 끝나면 두번째 드래그를 해야하는 방향의 화살표 이미지가 뜬다. 마찬가지로 사용자가 두번째 드래그를 하기 전까지는 두번째 모양의 화살표 이미지가 부드럽게 깜빡깜빡한다.
8. 다음의 드래그는 오른쪽에서 왼쪽으로 뚜껑을 벗기는 드래그 이다. 드래그가 유효하려면, 드래그 처음의 터치가 뚜껑 오브젝트를 터치하면서 시작해야 한다. 두번의 드래그가 끝나면, 뚜껑 오브젝트는 사라진다.
9. 뚜껑 오브젝트가 사라짐과 동시에 QuizPopup이 뜬다. -퀴즈 : 뚜껑은 어떻게 들어야 할까요? -선지 1) 안들고 책상에 둬도 된다. -선지 2) (이미지1 ) 이런 모양으로 -선지 3) (이미지2) 이런 모양으로
10. 선지 버튼을 아무거나 클릭하면, 답이면 o 이미지가 뜨고, 답이 아니면 x 이미지가 뜨고 smalldialuge팝업창이 뜬다. -smalldialuge의 텍스트 : "멸균상태를 유지하려면 뚜껑을 이렇게 들어야 해요!"
11. 화면을 한번 더 터치하면 QuizPopup과 smalldialuge가 닫힌다.
12. 가이드 텍스트 : 멸균증류수를 부을 곳을 터치하세요.
13. 플레이어가 터치한 곳에 따라 그 다음 반응이 나뉜다. -쓰레기통 오브젝트 -> 가이드 텍스트 : 다음으로 멸균증류수를 부을 곳을 터치하세요. -> 사용자가 '종지 오브젝트'를 터치하면 11번 단계로 넘어간다. 단, '그외 장소' 오브젝트를 터치하면 10번의 '그외장소' 매커니즘을 따른다. -종지 오브젝트 -> 화면의 테두리가 빨간색으로 두번 깜빡 깜빡하고, smalldialuge 팝업창이 뜬다. 이때 smalldialuge 팝업창의 캐릭터 이미지는 나쁜 표정 이미지이다. smalldialuge의 텍스트는 "병의 윗부분은 오염되어있을 수 있기 때문에, 소량의 물을 의료폐기물상자에 버리고 종지에 따라야 해. "이다. 종지 오브젝트를 터치하고 5초간은 아무런 터치도 유효하지 않다. 그리고 점수가 감점되고, 오류 데이터 베이스에 "멸균증류수를 부을 때는 먼저 의료폐기물통에 소량 부은 다음 종지에 부어야한다."라고 기록 된다. 다시 '9번'상태로 돌아가 '9번의 가이드 텍스트'가 뜬다. -그 외 장소 -> smalldialuge 팝업창이 뜬다. 이때 smalldialuge 팝업창의 캐릭터 이미지는 수간호사 이미지고, 닉네임은 '수간호사'이다. smalldialuge의 텍스트는 "....." 이다. 그리고 점수가 감점되고, 오류 데이터 베이스에 "멸균증류수를 이상한 곳에 부으면 안됩니다."라고 기록 된다. 다시 '9번'상태로 돌아가 '9번의 가이드 텍스트'가 뜬다.
14. 사용자가 클릭한 "종지 오브젝트"에 '물 이미지'가 생긴다.

멸균증류수말고도 다른 아이템이 많다. 그래서 모든 아이템을 총괄할 수 있는 코드면 좋겠다. 멸균증류수 용이면 안된다.  그리고 인스펙터랑 scene에서 웬만하면 값 조절해야한다. 멸균증류수는 그냥 예시다. 그걸 하기 위한 모든 총괄 시스템 개발을 도와줘야 한다.

<코드 작성할때는>
연동한 github의 scripts 파일을 보고 코드 수정을 도와줘. 무조건 그걸 기반으로 해야해. 내가 빼라는 기능도 아닌데 너가 멋대로 빼면 안돼. 항상 코드는 효율적이고, 실제 게임회사에서 많이 쓰이는 코드로 써줘. 코드는 범용성이 좋아야 해.  연동되어있는 github 파일을 항상 무조건 참고해. 그리고 현재 있는 파일 중 삭제가 필요한 건 삭제를 요청해줘. 굳이 script를 많이 만들지마. 항상 효율적으로 만들자.  혹시 삭제가 필요한 script가 있다면 허락받은 뒤 수정해줘. 
 
